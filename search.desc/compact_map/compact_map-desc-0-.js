searchState.loadedDescShard("compact_map", 0, "Small map in various sizes. These store a certain number …\nA map that inlines entries to avoid heap allocations for …\nA draining iterator over the entries of a <code>CompactMap</code>.\nA view into a single entry in a map, which may either be …\nA draining, filtering iterator over the entries of a …\nAn entry in the heapless state.\nAn entry in the heapless state.\nAn owning iterator over the entries of a <code>CompactMap</code>.\nAn owning iterator over the keys of a <code>CompactMap</code>.\nAn owning iterator over the values of a <code>CompactMap</code>.\nAn iterator over the entries of a <code>CompactMap</code>.\nA mutable iterator over the entries of a <code>CompactMap</code>.\nAn iterator over the keys of a <code>CompactMap</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>CompactMap</code>. It is part …\nThe error returned by <code>try_insert</code> when the key already …\nAn entry in the spilled state.\nAn entry in the spilled state.\nThe error type for <code>try_reserve</code> methods.\nA vacant entry.\nA view into a vacant entry in a <code>CompactMap</code>. It is part of …\nAn iterator over the values of a <code>CompactMap</code>.\nA mutable iterator over the values of a <code>CompactMap</code>.\nProvides in-place mutable access to an occupied entry …\nReturns the number of elements the map can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nReturns <code>true</code> if the map contains a value for the specified …\nClears the map, returning all key-value pairs as an …\nGets the given key’s corresponding entry in the map for …\nThe entry in the map that was already occupied.\nCreates an iterator which uses a closure to determine if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExamples\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nGets a mutable reference to the value in the entry.\nReturns a mutable reference to the value corresponding to …\nReturns a reference to the value corresponding to the …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nInserts a key-value pair into the map.\nSets the value of the entry, and returns an <code>OccupiedEntry</code>.\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the map into a <code>HashMap</code>.\nConverts the map into a <code>HashMap</code> with at least the …\nConverts the map into a <code>HashMap</code> with a given hasher.\nCreates a consuming iterator, that is, one that moves each …\nTake ownership of the key.\nCreates a consuming iterator visiting all the keys in …\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if the map contains no elements.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nReturns a reference to this entry’s key.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the map.\nCreates an empty <code>CompactMap</code>.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nTakes the value out of the entry, and returns it.\nRemoves a key from the map, returning the value at the key …\nTake the ownership of the key and value from the map.\nRemoves a key from the map, returning the stored key and …\nReplaces the entry, returning the old key and value. The …\nReplaces the key in the hash map with the key used to …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nShrinks the map into a heapless map with capacity <code>M</code>.\nThis is a proxy to the underlying <code>HashMap::shrink_to</code> …\nThis is a proxy to the underlying <code>HashMap::shrink_to_fit</code> …\nManually spills to a <code>HashMap</code>.\nReturns <code>true</code> if the data has spilled into an std <code>HashMap</code>.\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\nThe value which was not inserted, because the entry was …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.")